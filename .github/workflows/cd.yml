name: CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'k8s/**'
      - 'argocd/**'
      - '.github/workflows/cd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'prod'
        type: choice
        options:
        - prod
        - dev

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  update-manifests:
    name: Update K8s Manifests
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Update image tags in K8s manifests
      run: |
        # Get the latest image tag
        IMAGE_TAG=$(echo ${{ github.sha }} | cut -c1-7)
        FULL_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${IMAGE_TAG}"
        
        # Determine environment based on branch
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          ENV_PATH="k8s/prod"
          ENV_NAME="prod"
        elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
          ENV_PATH="k8s/dev"
          ENV_NAME="dev"
        else
          echo "Unknown branch, skipping manifest update"
          exit 0
        fi
        
        # Update deployment manifests for specific environment
        find ${ENV_PATH}/ -name "*.yaml" -exec sed -i "s|image: gitops-demo-app:.*|image: ${FULL_IMAGE}|g" {} \;
        
        # Update version in deployment
        find ${ENV_PATH}/ -name "deployment.yaml" -exec sed -i "s|version: v[0-9.]*|version: v1.0.${GITHUB_RUN_NUMBER}|g" {} \;
        
        echo "Updated manifests for ${ENV_NAME} environment"

    - name: Commit changes
      run: |
        git add k8s/
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Update image tags to ${IMAGE_TAG} for ${ENV_NAME} [skip ci]"
          git push
        fi

  create-pr:
    name: Create Version Bump PR
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Create version bump branch
      run: |
        BRANCH_NAME="version-bump-$(date +%Y%m%d-%H%M%S)"
        git checkout -b $BRANCH_NAME
        
        # Update version in package.json
        npm version patch --no-git-tag-version
        
        # Update K8s manifests with new version
        NEW_VERSION=$(node -p "require('./package.json').version")
        find k8s/ -name "deployment.yaml" -exec sed -i "s|version: v[0-9.]*|version: v${NEW_VERSION}|g" {} \;
        
        git add .
        git commit -m "Bump version to v${NEW_VERSION}"
        git push origin $BRANCH_NAME
        
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

    - name: Create Pull Request
      uses: actions/github-script@v7
      with:
        script: |
          const { data: pr } = await github.rest.pulls.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Version bump to v${process.env.NEW_VERSION}`,
            head: process.env.BRANCH_NAME,
            base: 'main',
            body: `## Version Bump PR
            
            This PR was automatically created to bump the application version.
            
            **Changes:**
            - Updated package.json version
            - Updated Kubernetes deployment manifests
            - Updated image tags
            
            **Version:** v${process.env.NEW_VERSION}
            
            Please review and merge to trigger deployment.`
          });
          
          console.log(`Created PR #${pr.number}: ${pr.html_url}`);

  notify-argocd:
    name: Notify ArgoCD
    runs-on: ubuntu-latest
    needs: [update-manifests]
    if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Notify ArgoCD about changes
      run: |
        echo "ArgoCD will automatically detect changes and sync the application"
        echo "Check ArgoCD UI for deployment status"
